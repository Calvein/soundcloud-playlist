(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./app/index.coffee":[function(require,module,exports){
var $, ID, audio, controls, currentTrack, form, goTo, input, list, next, nextTrack, play, playPause, prev, prevTrack, showTracks, submit, title;

ID = '5247b2c9dddfe7afb755c75a6198999d';

$ = function(sel, parent) {
  if (parent == null) {
    parent = document;
  }
  return parent.querySelector(sel);
};

form = $('form');

input = $('input');

list = $('ul');

controls = $('.controls');

prev = $('.prev');

play = $('.play');

title = $('.title');

next = $('.next');

audio = new Audio();

audio.controls = true;

form.appendChild(audio);

currentTrack = null;

showTracks = function(playlist) {
  var i, img, li, n, t, track, user, _i, _len, _ref;
  controls.removeAttribute('hidden');
  n = playlist.tracks.length;
  while (n) {
    i = Math.random() * n-- | 0;
    t = playlist.tracks[n];
    playlist.tracks[n] = playlist.tracks[i];
    playlist.tracks[i] = t;
  }
  _ref = playlist.tracks;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    track = _ref[_i];
    console.log(track);
    li = document.createElement('li');
    li.__data__ = track;
    img = document.createElement('img');
    img.src = track.artwork_url;
    user = document.createElement('span');
    user.textContent = track.user.username;
    title = document.createElement('b');
    title.textContent = track.title;
    li.appendChild(img);
    li.appendChild(user);
    li.appendChild(title);
    list.appendChild(li);
  }
  currentTrack = list.firstChild;
  list.firstChild.classList.add('active');
  title.textContent = currentTrack.__data__.title;
  return audio.src = currentTrack.__data__.src;
};

playPause = function() {
  play.classList.toggle('pause');
  if (play.classList.contains('pause')) {
    play.textContent = '>';
    return audio.pause();
  } else {
    play.textContent = '||';
    return audio.play();
  }
};

play.addEventListener('click', playPause);

goTo = function(el, forcePlay) {
  var data, isPlaying;
  if (!el) {
    return;
  }
  currentTrack.classList.remove('active');
  currentTrack = el;
  currentTrack.classList.add('active');
  data = currentTrack.__data__;
  title.textContent = data.title;
  isPlaying = forcePlay || !audio.paused;
  audio.src = data.src;
  if (isPlaying) {
    return audio.play();
  }
};

list.addEventListener('click', function(e) {
  var el;
  el = e.target;
  while (el.nodeName !== 'LI') {
    el = el.parentElement;
  }
  return goTo(el);
});

prevTrack = function() {
  return goTo(currentTrack.previousSibling);
};

prev.addEventListener('click', prevTrack);

nextTrack = function(e) {
  return goTo(currentTrack.nextSibling, e.type === 'ended');
};

next.addEventListener('click', nextTrack);

audio.addEventListener('ended', nextTrack);

document.addEventListener('keyup', function(e) {
  if ($(':focus')) {
    return;
  }
  switch (e.which) {
    case 32:
      return playPause();
    case 37:
      return prevTrack();
    case 39:
      return nextTrack();
  }
});

submit = function(e) {
  var uri, xhr;
  if (e != null) {
    e.preventDefault();
  }
  uri = 'http://api.soundcloud.com/resolve.json';
  uri += '?url=' + input.value;
  uri += '&client_id=' + ID;
  xhr = new XMLHttpRequest();
  xhr.open('GET', uri, true);
  xhr.onreadystatechange = function(e) {
    var error, playlist;
    if (this.readyState === 4) {
      if (this.status !== 200) {
        throw new Error('Error: ' + this.status);
      }
      try {
        playlist = JSON.parse(this.responseText);
      } catch (_error) {
        error = _error;
        throw error;
      }
      if (playlist.kind !== 'playlist') {
        throw new Error('Has to be a playlist');
      }
      playlist.tracks.forEach(function(track) {
        return track.src = track.stream_url + '?client_id=' + ID;
      });
      return showTracks(playlist);
    }
  };
  return xhr.send();
};

form.addEventListener('submit', submit);

submit();



},{}]},{},["./app/index.coffee"])
//# sourceMappingURL=data:application/json;base64,
